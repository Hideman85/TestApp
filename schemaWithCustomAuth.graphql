##########################################################
##          Basic types
##########################################################
enum FileAccessLevel {
  PUBLIC
  PROTECTED
  PRIVATE
}

type File {
  key: String!
  level: FileAccessLevel!
}

type Address {
  address: String
  city: String
  postcode: String
  country: String
}


##########################################################
##          User & Team & Organisation
##########################################################
type User
@model(mutations: { create: "createUser", update: "updateUser" })
@auth(rules: [{
  allow: owner,
  provider: userPools,
  ownerField: "id",
  identityClaim: "sub",
  operations: [update]
}])
{
  id: ID! @Check(values: ["$ctx.identity.sub"])
  firstName: String!
  lastName: String!
  avatar: File
  address: Address # @FilterOut(cond: { op: NOT_EQUAL, values: ["$ctx.identity.sub"] })
  phoneNumber: String # @FilterOut(cond: { op: NOT_EQUAL, values: ["$ctx.identity.sub"] })
  currentOrganisationID: ID # @ReadOnly # set by a lambda
}

type Team
@model
@CustomAuth(
  rules: [{
    actions: [CREATE, UPDATE, DELETE],
    kind: ORGANISATION_ADMIN,
    allowedRoles: []
  }, {
    actions: [GET, LIST, SUBSCRIPTION],
    kind: ORGANISATION_MEMBER,
    allowedRoles: []
  }],
  listConfig: {
    kind: LIST_BY_ORGANISATION_ID,
    listIndex: "byOrganisationID",
    organisationID: "organisationID"
  }
)
@key(name: "byOrganisationID", fields: ["organisationID"])
{
  id: ID! # team-
  name: String!
  organisationID: ID! @ReadOnly @Check(values: ["$ctx.stash.userData.currentOrganisationID"])
  createdBy: ID @ReadOnly @Set(value: "$ctx.identity.sub")
}

type Organisation
@model
@CustomAuth(
  rules: [{
    actions: [CREATE, UPDATE, DELETE],
    kind: ORGANISATION_ADMIN,
    allowedRoles: []
  }, {
    actions: [GET, LIST, SUBSCRIPTION],
    kind: ORGANISATION_MEMBER,
    allowedRoles: []
  }],
  #  listConfig: {
  #    kind: LIST_BY_ORGANISATION_ID,
  #    listIndex: null,
  #    organisationID: "id"
  #  }
)
{
  id: ID! # org-
  name: String!
  address: Address
  createdBy: ID @ReadOnly @Set(value: "$ctx.identity.sub")
}


##########################################################
##          Organisation Roles
##########################################################
union Entity = User | Team
enum EnityTypeEnum { User, Team }

enum OrganisationRoleEnum {
  NO_ACCESS
  VIEWING_ACCESS
  CREATING_ACCESS
}

type OrganisationRole
@model
@CustomAuth(
  rules: [{
    actions: [CREATE, UPDATE, DELETE],
    kind: ORGANISATION_ADMIN,
    allowedRoles: []
  }, {
    actions: [GET, LIST, SUBSCRIPTION],
    kind: ORGANISATION_MEMBER,
    allowedRoles: []
  }],
  listConfig: {
    kind: LIST_BY_ORGANISATION_ID,
    listIndex: null,
    organisationID: "organisationID"
  }
)
@key(fields: ["organisationID", "entityID"])
{
  id: ID! # TODO: Remove this attribute
  entityID: ID!
  # entity: Entity! @connection(fields: ["entityID"])
  organisationID: ID! @ReadOnly @Check(values: ["$ctx.stash.userData.currentOrganisationID"])
  # organisation: Organisation! @connection(fields: ["organisationID"])
  templateRole: OrganisationRoleEnum!
  contractRole: OrganisationRoleEnum!
  teamID: ID
  # team: Team @connection(fields: ["teamID"])
  isManager: Boolean
  addedBy: ID @ReadOnly @Set(value: "$ctx.identity.sub")
}


##########################################################
##          InputField & Conditional
##########################################################
enum InputFieldTypeEnum {
  COMPANY
  PERSON
  BOOLEAN
  ONE_LINE_TEXT
  MULTI_LINE_TEXT
  NUMBER
  PHONE
  AWSDate
  TIME
  LIST
  COMBINED_LIST
}

type InputField
@model
@CustomAuth(
  rules: [{
    actions: [CREATE, UPDATE],
    kind: ORGANISATION_MEMBER,
    allowedRoles: []
  }, {
    actions: [DELETE],
    kind: ORGANISATION_ADMIN,
    allowedRoles: []
  }, {
    actions: [GET, LIST, SUBSCRIPTION],
    kind: ORGANISATION_MEMBER,
    allowedRoles: []
  }],
  listConfig: {
    kind: LIST_BY_ORGANISATION_ID,
    listIndex: null,
    organisationID: "organisationID"
  }
)
{
  id: ID! # input-
  organisationID: ID! @ReadOnly @Check(values: ["$ctx.stash.userData.currentOrganisationID"])
  # organisation: Organisation! @connection(fields: ["organisationID"])
  type: InputFieldTypeEnum!
  name: String!
  question: String!
  # Only List & Combined List needs extra configs
  # List of choices need a dictionary of values
  values: AWSJSON
  # Combined list need a text and optionally a base list
  text: String
  baseListID: ID
  # baseList: InputField @connection(fields: ["baseListID"])
  tags: [String!]!
}

type Conditional
@model
@CustomAuth(
  rules: [{
    actions: [CREATE, UPDATE],
    kind: ORGANISATION_MEMBER,
    allowedRoles: []
  }, {
    actions: [DELETE],
    kind: ORGANISATION_ADMIN,
    allowedRoles: []
  }, {
    actions: [GET, LIST, SUBSCRIPTION],
    kind: ORGANISATION_MEMBER,
    allowedRoles: []
  }],
  listConfig: {
    kind: LIST_BY_ORGANISATION_ID,
    listIndex: null,
    organisationID: "organisationID"
  }
)
{
  id: ID! # cond-
  organisationID: ID! @ReadOnly @Check(values: ["$ctx.stash.userData.currentOrganisationID"])
  # organisation: Organisation! @connection(fields: ["organisationID"])
  fieldID: ID!
  # field: InputField! @connection(fields: ["fieldID"])
  values: AWSJSON!
  tags: [String!]!
}


##########################################################
##          Section
##########################################################
type SectionDelta
@model
@CustomAuth(subModel: {
  kind: FULLY_TRANSITIVE,
  parentType: "SectionText"
})
@key(name: "byRootID", fields: ["rootID", "id"])
{
  id: ID! # parentID:delta-
  rootID: ID! @ReadOnly
  operation: AWSJSON! @ReadOnly
  comment: String
  changedBy: ID @ReadOnly @Set(value: "$ctx.identity.sub")
  # changedByUser: User! @connection(fields: "changedBy")
  acceptedBy: ID @ReadOnly(allowSetWhenEmpty: true)
  # acceptedByUser: User @connection(fields: "acceptedBy")
  acceptedAWSDate: AWSDate
}

type SectionText
@model
@CustomAuth(subModel: {
  kind: FULLY_TRANSITIVE,
  parentType: "Template"
})
@key(name: "byRootID", fields: ["rootID", "id"])
{
  id: ID! # parentID:sectionText-
  rootID: ID! @ReadOnly
  text: String!
  # deltas: [SectionDelta!]! # History & red lining
  # pendingDeltas: [SectionDelta!]! # History & red lining
  fields: AWSJSON!
  conditionals: AWSJSON!
  references: AWSJSON!
  tags: [String!]!

  # On the case of a copy
  originalSectionTextID: ID @ReadOnly # Set by a lambda
  # originalSectionText: SectionText @connection(fields: ["originalSectionTextID"])
}

type SectionFile
@model
@CustomAuth(subModel: {
  kind: FULLY_TRANSITIVE,
  parentType: "Template"
})
@key(name: "byRootID", fields: ["rootID", "id"])
{
  id: ID! # parentID:sectionFile-
  rootID: ID! @ReadOnly
  file: File!
  tags: [String!]!

  # On the case of a copy
  originalSectionFileID: ID @ReadOnly # Set by a lambda
  # originalSectionFile: SectionFile @connection(fields: ["originalSectionFileID"])
}

union Section = SectionText | SectionFile

type TemplateSection {
  sectionID: ID!
  # section: Section! @connection(fields: ["sectionID"])
  subSections: [TemplateSection1!]!
}
# DataStore does not work with recursive models
type TemplateSection1 {
  sectionID: ID!
  # section: Section! @connection(fields: ["sectionID"])
  subSections: [TemplateSection2!]!
}
type TemplateSection2 {
  sectionID: ID!
  # section: Section! @connection(fields: ["sectionID"])
  subSections: [TemplateSection3!]!
}
type TemplateSection3 {
  sectionID: ID!
  # section: Section! @connection(fields: ["sectionID"])
  subSections: [String!]!
}


##########################################################
##          Template
##########################################################
type Template
@model
@CustomAuth(
  rules: [{
    actions: [CREATE],
    kind: ORGANISATION_ROLE,
    allowedRoles: [CREATING_ACCESS, ADMIN_ACCESS],
  }, {
    actions: [UPDATE],
    kind: INSTANCE_ROLE,
    allowedRoles: [EDITING_ACCESS, ADMIN_ACCESS],
    instanceField: "id"
  }, {
    actions: [DELETE],
    kind: INSTANCE_ROLE,
    allowedRoles: [ADMIN_ACCESS],
    instanceField: "id"
  }, {
    actions: [GET, LIST, SUBSCRIPTION],
    kind: INSTANCE_ROLE,
    allowedRoles: [VIEWING_ACCESS, COMMENTING_ACCESS, EDITING_ACCESS, ADMIN_ACCESS],
    instanceField: "id"
  }],
  listConfig: {
    kind: LIST_BY_INSTANCE_ROLE_LOOKUP
  },
  subModel: {
    kind: CONDITIONALLY_TRANSITIVE,
    parentType: "Contract"
  },
  autoCreateAdminRole: true
)
@key(name: "byRootID", fields: ["rootID", "id"])
{
  id: ID! # parentID:template-
  rootID: ID @ReadOnly
  name: String!
  description: String
  header: ID
  sections: [TemplateSection!]!
  footer: ID
  annexes: [TemplateSection!]!
  createdBy: ID @ReadOnly @Set(value: "$ctx.identity.sub")

  # On the case of a copy
  originalTemplateID: ID @ReadOnly # Set by a lambda
  # originalTemplate: Template @connection(fields: ["originalTemplateID"])
}


##########################################################
##          Contract
##########################################################
enum ContractStatus {
  FILLING
  EDITING
  SIGNING
  SIGNED
  REJECTED
}

type Contract
@model
@CustomAuth(
  rules: [{
    actions: [CREATE],
    kind: ORGANISATION_ROLE,
    allowedRoles: [CREATING_ACCESS, ADMIN_ACCESS],
  }, {
    actions: [UPDATE],
    kind: INSTANCE_ROLE,
    allowedRoles: [EDITING_ACCESS, ADMIN_ACCESS],
    instanceField: "id"
  }, {
    actions: [DELETE],
    kind: INSTANCE_ROLE,
    allowedRoles: [ADMIN_ACCESS],
    instanceField: "id"
  }, {
    actions: [GET, LIST, SUBSCRIPTION],
    kind: INSTANCE_ROLE,
    allowedRoles: [VIEWING_ACCESS, COMMENTING_ACCESS, EDITING_ACCESS, ADMIN_ACCESS],
    instanceField: "id"
  }],
  listConfig: {
    kind: LIST_BY_INSTANCE_ROLE_LOOKUP
  },
  autoCreateAdminRole: true
)
{
  id: ID! # contract-
  name: String!
  status: ContractStatus!
  fieldsResponses: AWSJSON!
  additionalDocuments: [File!]!
  createdBy: ID @ReadOnly @Set(value: "$ctx.identity.sub")
}


##########################################################
##          Instance Roles
##########################################################
union Instance = Template | Contract
enum InstanceTypeEnum { Template, Contract }

enum InstanceRoleEnum {
  NO_ACCESS
  READ_ACCESS
  WRITE_ACCESS
  ADMIN_ACCESS
}

type ParentInstanceRole {
  instanceType: InstanceTypeEnum!
  instanceID: ID!
  # instance: Instance! @connection(fields: ["instanceID"])
  entityID: ID!
}

type InstanceRole
@model
@CustomAuth(
  rules: [{
    actions: [CREATE, UPDATE, DELETE],
    kind: INSTANCE_ROLE,
    allowedRoles: [ADMIN_ACCESS],
    instanceField: "instanceID"
  }, {
    actions: [GET, LIST, SUBSCRIPTION],
    kind: INSTANCE_ROLE,
    allowedRoles: [VIEWING_ACCESS, COMMENTING_ACCESS, EDITING_ACCESS, ADMIN_ACCESS],
    instanceField: "instanceID"
  }],
  #  listConfig: {
  #    kind: DIRECT_ROLE
  #  }
)
@key(fields: ["instanceID", "entityID"])
@key(name: "instanceLookupByKind", fields: ["organisationID", "instanceType"])
{
  id: ID! # TODO: Remove this attribute
  instanceType: InstanceTypeEnum! @ReadOnly
  instanceID: ID! @ReadOnly
  # instance: Instance! @connection(fields: ["instanceID"])
  entityID: ID! @ReadOnly
  # entity: Entity! @connection(fields: ["entityID"])
  # organisationID used for distinguishe who is visible externally
  organisationID: ID! @ReadOnly @Check(values: ["$ctx.stash.userData.currentOrganisationID", "__EVERYONE__"])
  # organisation: Organisation @connection(fields: ["organisationID"])
  role: InstanceRoleEnum!
  addedBy: ID @ReadOnly @Set(value: "$ctx.identity.sub")
}


##########################################################
##          Commenting
##########################################################
union CommentInstance = Template | Contract | SectionText | SectionFile | InputField | Conditional

type Comment
@model
@CustomAuth(
  rules: [{
    actions: [CREATE],
    kind: INSTANCE_ROLE,
    allowedRoles: [COMMENTING_ACCESS, EDITING_ACCESS, ADMIN_ACCESS],
    instanceField: "instanceID"
  }, {
    actions: [UPDATE, DELETE],
    kind: INSTANCE_ROLE,
    allowedRoles: [ADMIN_ACCESS],
    instanceField: "instanceID"
  }, {
    actions: [GET, LIST, SUBSCRIPTION],
    kind: INSTANCE_ROLE,
    allowedRoles: [VIEWING_ACCESS, COMMENTING_ACCESS, EDITING_ACCESS, ADMIN_ACCESS],
    instanceField: "instanceID"
  }]
)
@key(name: "byInstanceID", fields: ["instanceID", "id"])
{
  id: ID! # comment-
  userID: ID @ReadOnly @Set(value: "$ctx.identity.sub")
  # user: User! @connection(fields: ["userID"])
  instanceID: ID! @ReadOnly
  # instance: CommentInstance! @connection(fields: ["instanceID"])
  # organisationID used for distinguish inter and external comments
  organisationID: ID! @ReadOnly @Check(values: ["$ctx.stash.userData.currentOrganisationID", "__EVERYONE__"])
  # organisation: Organisation @connection(fields: ["organisationID"])
  text: String!
}

