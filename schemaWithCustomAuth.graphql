##########################################################
##          Basic types
##########################################################
enum FileAccessLevel {
  PUBLIC
  PROTECTED
  PRIVATE
}

type File {
  key: String!
  level: FileAccessLevel!
}

type Address {
  address: String
  city: String
  postcode: String
  country: String
}


##########################################################
##          User & Team & Organisation
##########################################################
type User
@model
@auth(rules: [{
  allow: owner
  ownerField: "id"
  identityClaim: "sub"
  operations: [create] # create it will auto populates id
}])
{
  id: ID!
  firstName: String!
  lastName: String!
  avatar: File
  address: Address
  phoneNumber: String
}

type Team
@model
@auth(rules: [{
  allow: owner
  ownerField: "createdBy"
  identityClaim: "sub"
  operations: [create] # create it will auto populates createdBy
}])
@CustomAuth(rules: [{
  actions: [CREATE, UPDATE, DELETE],
  kind: ORGANISATION_ADMIN,
  allowedRoles: []
}, {
  actions: [GET, LIST, SUBSCRIPTION]
  kind: ORGANISATION_MEMBER,
  allowedRoles: []
}])
{
  id: ID! # team-
  name: String!
  organisationID: ID!
  createdBy: ID!
}

type Organisation
@model
@auth(rules: [{
  allow: owner
  ownerField: "createdBy"
  identityClaim: "sub"
  operations: [create] # create it will auto populates createdBy
}])
@CustomAuth(rules: [{
  actions: [CREATE, UPDATE, DELETE],
  kind: ORGANISATION_ADMIN,
  allowedRoles: []
}, {
  actions: [GET, LIST, SUBSCRIPTION]
  kind: ORGANISATION_MEMBER,
  allowedRoles: []
}])
{
  id: ID! # org-
  name: String!
  address: Address
  createdBy: ID!
}


##########################################################
##          Organisation Roles
##########################################################
union Entity = User | Team

enum OrganisationRoleEnum {
  NO_ACCESS
  VIEWING_ACCESS
  CREATING_ACCESS
}

type OrganisationRole
@model
@auth(rules: [{
  allow: owner
  ownerField: "addedBy"
  identityClaim: "sub"
  operations: [create] # create it will auto populates addedBy
}])
@CustomAuth(rules: [{
  actions: [CREATE, UPDATE, DELETE],
  kind: ORGANISATION_ROLE,
  allowedRoles: [ADMIN_ACCESS]
}, {
  actions: [GET, LIST, SUBSCRIPTION]
  kind: ORGANISATION_ROLE,
  allowedRoles: [VIEWING_ACCESS, CREATING_ACCESS, ADMIN_ACCESS]
}])
@key(fields: ["organisationID", "entityID"])
{
  entityID: ID!
  # entity: Entity! @connection(fields: ["entityID"])
  organisationID: ID!
  # organisation: Organisation! @connection(fields: ["organisationID"])
  templateRole: OrganisationRoleEnum!
  contractRole: OrganisationRoleEnum!
  team: Team
  isManager: Boolean
  addedBy: ID!
}


##########################################################
##          InputField & Conditional
##########################################################
enum InputFieldTypeEnum {
  COMPANY
  PERSON
  BOOLEAN
  ONE_LINE_TEXT
  MULTI_LINE_TEXT
  NUMBER
  PHONE
  AWSDate
  TIME
  LIST
  COMBINED_LIST
}

type InputField
@model
{
  id: ID! # input-
  organisationID: ID!
  # organisation: Organisation! @connection(fields: ["organisationID"])
  type: InputFieldTypeEnum!
  name: String!
  question: String!
  # Only List & Combined List needs extra configs
  # List of choices need a dictionary of values
  values: AWSJSON
  # Combined list need a text and optionally a base list
  text: String
  baseListID: ID
  # baseList: InputField @connection(fields: ["baseListID"])
  tags: [String!]!
}

type Conditional
@model
{
  id: ID! # cond-
  organisationID: ID!
  # organisation: Organisation! @connection(fields: ["organisationID"])
  fieldID: ID!
  # field: InputField! @connection(fields: ["fieldID"])
  values: AWSJSON!
  tags: [String!]!
}


##########################################################
##          Section
##########################################################
type SectionDelta
@model
@auth(rules: [{
  allow: owner
  ownerField: "changedBy"
  identityClaim: "sub"
  operations: [create] # create it will auto populates changedBy
}])
{
  id: ID! # delta-
  sectionID: ID!
  # section: Section! @connection(fields: ["sectionID"])
  operation: AWSJSON!
  comment: String
  changedBy: ID!
  # changedByUser: User! @connection(fields: "changedBy")
  acceptedBy: ID
  # acceptedByUser: User @connection(fields: "acceptedBy")
  acceptedAWSDate: AWSDate
}

type SectionText
@model
{
  id: ID! # sectionText-
  organisationID: ID!
  # organisation: Organisation! @connection(fields: ["organisationID"])
  text: String!
  deltas: [SectionDelta!]! # History & red lining
  pendingDeltas: [SectionDelta!]! # History & red lining
  fields: AWSJSON!
  conditionals: AWSJSON!
  references: AWSJSON!
  tags: [String!]!
}

type SectionFile
@model
{
  id: ID! # sectionFile-
  organisationID: ID!
  # organisation: Organisation! @connection(fields: ["organisationID"])
  file: File!
  tags: [String!]!
}

union Section = SectionText | SectionFile

type TemplateSection {
  sectionID: ID!
  # section: Section! @connection(fields: ["sectionID"])
  subSections: [TemplateSection!]!
}


##########################################################
##          Template
##########################################################
type Template
@model
@auth(rules: [{
  allow: owner
  ownerField: "createdBy"
  identityClaim: "sub"
  operations: [create] # create it will auto populates createdBy
}])
@CustomAuth(rules: [{
  actions: [CREATE],
  kind: ORGANISATION_ROLE,
  allowedRoles: [CREATING_ACCESS, ADMIN_ACCESS]
}, {
  actions: [UPDATE],
  kind: INSTANCE_ROLE,
  allowedRoles: [EDITING_ACCESS, ADMIN_ACCESS]
  instanceField: "instanceID"
}, {
  actions: [DELETE],
  kind: INSTANCE_ROLE,
  allowedRoles: [ADMIN_ACCESS]
  instanceField: "instanceID"
}, {
  actions: [GET, LIST, SUBSCRIPTION]
  kind: INSTANCE_ROLE,
  allowedRoles: [VIEWING_ACCESS, COMMENTING_ACCESS, EDITING_ACCESS, ADMIN_ACCESS]
  instanceField: "instanceID"
}])
{
  id: ID! # template-
  name: String!
  description: String
  header: ID
  sections: [TemplateSection!]!
  footer: ID
  annexes: [TemplateSection!]!
  originalTemplate: Template
  createdBy: ID!
}


##########################################################
##          Contract
##########################################################
enum ContractStatus {
  FILLING
  EDITING
  SIGNING
  SIGNED
  REJECTED
}

type Contract
@model
@auth(rules: [{
  allow: owner
  ownerField: "createdBy"
  identityClaim: "sub"
  operations: [create] # create it will auto populates createdBy
}])
@CustomAuth(rules: [{
  actions: [CREATE],
  kind: ORGANISATION_ROLE,
  allowedRoles: [CREATING_ACCESS, ADMIN_ACCESS]
}, {
  actions: [UPDATE],
  kind: INSTANCE_ROLE,
  allowedRoles: [EDITING_ACCESS, ADMIN_ACCESS]
  instanceField: "instanceID"
}, {
  actions: [DELETE],
  kind: INSTANCE_ROLE,
  allowedRoles: [ADMIN_ACCESS]
  instanceField: "instanceID"
}, {
  actions: [GET, LIST, SUBSCRIPTION]
  kind: INSTANCE_ROLE,
  allowedRoles: [VIEWING_ACCESS, COMMENTING_ACCESS, EDITING_ACCESS, ADMIN_ACCESS]
  instanceField: "instanceID"
}])
{
  id: ID! # contract-
  name: String!
  status: ContractStatus!
  fieldsResponses: AWSJSON!
  additionalDocuments: [File!]!
  createdBy: ID!
}


##########################################################
##          Instance Roles
##########################################################
union Instance = Template | Contract

enum InstanceRoleEnum {
  NO_ACCESS
  READ_ACCESS
  WRITE_ACCESS
  ADMIN_ACCESS
}

type InstanceRole
@model
@auth(rules: [{
  allow: owner
  ownerField: "addedBy"
  identityClaim: "sub"
  operations: [create] # create it will auto populates addedBy
}])
@CustomAuth(rules: [{
  actions: [CREATE, UPDATE, DELETE],
  kind: INSTANCE_ROLE,
  allowedRoles: [ADMIN_ACCESS]
  instanceField: "instanceID"
}, {
  actions: [GET, LIST, SUBSCRIPTION]
  kind: INSTANCE_ROLE,
  allowedRoles: [VIEWING_ACCESS, COMMENTING_ACCESS, EDITING_ACCESS, ADMIN_ACCESS]
  instanceField: "instanceID"
}])
@key(fields: ["instanceID", "entityID"])
{
  instanceID: ID!
  # instance: Instance! @connection(fields: ["instanceID"])
  entityID: ID!
  # entity: Entity! @connection(fields: ["entityID"])
  organisationID: ID # used for distinguishe who is visible externally
  # organisation: Organisation @connection(fields: ["organisationID"])
  role: InstanceRoleEnum!
  addedBy: ID!
}


##########################################################
##          Commenting
##########################################################
union CommentInstance = Template | Contract | SectionText | SectionFile | InputField | Conditional

type Comment
@model
@auth(rules: [{
  allow: owner
  ownerField: "userID"
  identityClaim: "sub"
  operations: [create] # create it will auto populates userID
}])
@CustomAuth(rules: [{
  actions: [CREATE],
  kind: INSTANCE_ROLE,
  allowedRoles: [COMMENTING_ACCESS, EDITING_ACCESS, ADMIN_ACCESS]
  instanceField: "instanceID"
}, {
  actions: [UPDATE, DELETE],
  kind: INSTANCE_ROLE,
  allowedRoles: [ADMIN_ACCESS]
  instanceField: "instanceID"
}, {
  actions: [GET, LIST, SUBSCRIPTION]
  kind: INSTANCE_ROLE,
  allowedRoles: [VIEWING_ACCESS, COMMENTING_ACCESS, EDITING_ACCESS, ADMIN_ACCESS]
  instanceField: "instanceID"
}])
@key(name: "byInstanceID", fields: ["instanceID", "organisationID"])
{
  id: ID! # comment-
  userID: ID!
  # user: User! @connection(fields: ["userID"])
  instanceID: ID!
  # instance: CommentInstance! @connection(fields: ["instanceID"])
  organisationID: ID # used for distinguish inter and external comments
  # organisation: Organisation @connection(fields: ["organisationID"])
  text: String!
}


##########################################################
##          Activity Feed
##########################################################


